import asyncio
import aiosqlite
import time
import datetime
from aiogram.dispatcher.router import Router
from aiogram.types import Message, User, ReplyKeyboardRemove, CallbackQuery
from load_config import load_config, save_config
from aiogram import F
from aiogram.filters import Command, CommandStart, StateFilter
from buttons import *
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Bot

router = Router()
config = load_config()
FORUM_CHAT_ID = int(config.get("target_chat"))

def parse_time(time_str: str) -> int:
    suffixes = {'m': 60, 'h': 3600, 'd': 86400}
    suffix = time_str[-1].lower()
    if suffix not in suffixes:
        return 0
    return int(time_str[:-1]) * suffixes[suffix]

async def init_chats_db():
    async with aiosqlite.connect('data/chat_links.db') as db:
        await db.execute('''CREATE TABLE IF NOT EXISTS chats
            (user_id INTEGER, 
             topic_id INTEGER,
             type TEXT)''')
        await db.execute('''CREATE TABLE IF NOT EXISTS confirmations
            (user_id INTEGER PRIMARY KEY,
             last_sent REAL)''')
        await db.commit()

async def get_or_create_topic(user: User, request_type: str, bot: Bot):
    user_id = user.id
    async with aiosqlite.connect('data/chat_links.db') as db:
        cursor = await db.execute(
            "SELECT topic_id FROM chats WHERE user_id = ? AND type = ?",
            (user_id, request_type)
        )
        topic_id = await cursor.fetchone()
        
        if topic_id is None:
            username = f"@{user.username}" if user.username else "[–ù–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞]"
            topic_name = f"{request_type} {user.full_name} {username}"
            topic = await bot.create_forum_topic(
                chat_id=FORUM_CHAT_ID,
                name=topic_name
            )
            topic_id = topic.message_thread_id
            await db.execute(
                "INSERT INTO chats(user_id, topic_id, type) VALUES (?, ?, ?)",
                (user_id, topic_id, request_type)
            )
            await db.commit()
    
    return topic_id[0] if isinstance(topic_id, tuple) else topic_id

async def forward_to_user(topic_id: int, message: Message):
    async with aiosqlite.connect('data/chat_links.db') as db:
        cursor = await db.execute(
            "SELECT user_id FROM chats WHERE topic_id = ?",
            (topic_id,)
        )
        result = await cursor.fetchone()
        
    if result is None:
        return
    
    user_id = result[0]
    try:
        await message.bot.send_message(user_id, message.text)
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

class FormType(StatesGroup):
    is_active = State()

class SettingsChange(StatesGroup):
    setting_changed = State()

request_filter = StateFilter(FormType.is_active)
settings_filter = StateFilter(SettingsChange.setting_changed)

translations = {
    "texts": {
        "greeting": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "application": "–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ",
        "report": "–¢–µ–∫—Å—Ç –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã", 
        "collaboration": "–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ",
        "staff": "–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –∏–≥—Ä–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å",
        "event": "–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞",
        "reward": "–¢–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–ø—Ä–æ—Å –Ω–∞–≥—Ä–∞–¥—ã",
        "other": "–¢–µ–∫—Å—Ç –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ",
        "confirmation": "–¢–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"
    },
    "emojis": {
        "application": "–≠–º–æ–¥–∑–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ",
        "report": "–≠–º–æ–¥–∑–∏ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã",
        "collaboration": "–≠–º–æ–¥–∑–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ",
        "staff": "–≠–º–æ–¥–∑–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∏–≥—Ä–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å",
        "event": "–≠–º–æ–¥–∑–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏–≤–µ–Ω—Ç–∞",
        "reward": "–≠–º–æ–¥–∑–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–ø—Ä–æ—Å –Ω–∞–≥—Ä–∞–¥—ã",
        "other": "–≠–º–æ–¥–∑–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ"
    }
} 

@router.callback_query(F.data.startswith("request-"))
async def handle_start_buttons(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split("-")[1]
    texts = config.get("texts")
    response = texts.get(action)
    
    await callback.answer()
    await callback.message.answer(response, reply_markup=cancel_markup)
    await state.set_state(FormType.is_active)
    await state.set_data({"type": action})

@router.callback_query(F.data.startswith("settings"))
async def handle_settings_buttons(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    is_creator = await callback.bot.get_chat_member(FORUM_CHAT_ID,user_id)
    if is_creator.status != "creator":
        return
    parts = callback.data.split("-")
    category = parts[1] if len(parts) > 1 else None
    subcategory = parts[2] if len(parts) > 2 else None
    await state.set_state(None)
    
    if category == "texts":
        if subcategory:
            current_text = config['texts'].get(subcategory, "‚ùå –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.message.edit_text(
                f"{translations['texts'].get(subcategory)}\n"
                f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_text}\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:", reply_markup=keyboard_back
            )
            await state.set_state(SettingsChange.setting_changed)
            await state.set_data({"category": category, "subcategory": subcategory})
        else:
            await callback.message.edit_text("üìÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤:", reply_markup=texts_keyboard)
    elif category == "emojis":
        if subcategory:
            current_emoji = config['emojis'].get(subcategory, {}).get('emoji', '‚ùå')
            await callback.message.edit_text(
                f"{translations['emojis'].get(subcategory)}\n"
                f"–¢–µ–∫—É—â–∏–π —ç–º–æ–¥–∑–∏: {current_emoji}\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —ç–º–æ–¥–∑–∏:", reply_markup=keyboard_back
            )
            await state.set_state(SettingsChange.setting_changed)
            await state.set_data({"category": category, "subcategory": subcategory})
        else:
            await callback.message.edit_text("üòÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–º–æ–¥–∑–∏:", reply_markup=emojis_keyboard)
    elif category == "messages":
        await callback.message.edit_text(
            f"–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {config['cooldown']}\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30m, 2h):",
            reply_markup=keyboard_back
        )
        await state.set_state(SettingsChange.setting_changed)
        await state.set_data({"setting_type":"confirmation_cooldown"})
    elif category == "chat_mode":
        if subcategory:
            if subcategory == "chat":
                config["chat_mode"] = "single"
                save_config(config)
            elif subcategory == "topic":
                config["chat_mode"] = "multiple"
                save_config(config)
        else:
            await callback.message.edit_text("üí¨ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —á–∞—Ç–∞:", reply_markup=chatmode_buttons)
    elif category == "reply_ways":
        await callback.message.edit_text("üõ£Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ø–æ—Å–æ–±–æ–≤ –æ—Ç–≤–µ—Ç–∞:", reply_markup=replyways_buttons)
    else:
        await callback.message.edit_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:", reply_markup=settings_keyboard)
    
    save_config(config)
    await callback.answer()

@router.message(CommandStart(), F.chat.type == "private")
async def start(msg: Message):
    await msg.answer(config["texts"]["greeting"], reply_markup=start_keyboard)

@router.message(request_filter, F.chat.type == "private")
async def theme_choose(msg: Message, state: FSMContext):
    if msg.from_user.id == msg.bot.id:
        return
    
    if FORUM_CHAT_ID is None:
        await msg.answer("‚ùå –¶–µ–ª–µ–≤–æ–π —á–∞—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_chat")
        return
    
    data = await state.get_data()
    request_type = data["type"]
    
    # –†–µ–∂–∏–º –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —á–∞—Ç–∞
    if config.get("chat_mode") == "single":
        if not config.get("target_topic"):
            await msg.answer("‚ùå –¢–µ–º–∞ –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!")
            return
            
        await msg.forward(
            chat_id=FORUM_CHAT_ID,
            message_thread_id=config["target_topic"]
        )
    else:
        topic_id = await get_or_create_topic(msg.from_user, config["emojis"][request_type]["emoji"], msg.bot)
        await msg.send_copy(
            chat_id=FORUM_CHAT_ID,
            message_thread_id=topic_id
        )
    
    current_time = time.time()
    async with aiosqlite.connect('data/chat_links.db') as db:
        cursor = await db.execute(
            "SELECT last_sent FROM confirmations WHERE user_id = ?",
            (msg.from_user.id,)
        )
        last_sent = await cursor.fetchone()

        cooldown = parse_time(config["cooldown"])
        
        if not last_sent or (current_time - last_sent[0]) > cooldown:
            await msg.answer(config["texts"]["confirmation"])
            await db.execute(
                '''INSERT OR REPLACE INTO confirmations 
                (user_id, last_sent) VALUES (?, ?)''',
                (msg.from_user.id, current_time)
            )
            await db.commit()


@router.message(Command("ban"))
async def ban_command(message: Message, bot: Bot):
    try:
        chat_member = await bot.get_chat_member(message.chat.id, message.from_user.id)
        if chat_member.status not in ['administrator', 'creator']:
            await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
            return
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {str(e)}")
        return

    if config.get("chat_mode") == "single":
        if not message.reply_to_message or not message.reply_to_message.forward_from:
            await message.reply("‚ö† –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
            return
            
        user_id = message.reply_to_message.forward_from.id
    else:
        if not message.message_thread_id:
            await message.reply("‚ö† –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä—É–º–Ω–æ–π —Ç–µ–º–µ!")
            return
        
        async with aiosqlite.connect('data/chat_links.db') as db:
            cursor = await db.execute(
                "SELECT user_id FROM chats WHERE topic_id = ?",
                (message.message_thread_id,)
            )
            result = await cursor.fetchone()
            if not result:
                await message.reply("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
            user_id = result[0]

    args = message.text.split()
    time_arg = None
    duration = None
    
    if len(args) >= 2:
        time_arg = args[1]
        duration = parse_time(time_arg)
        if duration and duration <= 0:
            await message.reply("‚õî –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\nm - –º–∏–Ω—É—Ç—ã\nh - —á–∞—Å—ã\nd - –¥–Ω–∏")
            return

    if duration:
        ban_end = datetime.datetime.now() + datetime.timedelta(seconds=duration)
        timestamp = ban_end.timestamp()
        time_info = f"‚è≥ –°—Ä–æ–∫: {time_arg}\n"
        ban_end_str = ban_end.strftime('%Y-%m-%d %H:%M:%S')
    else:
        ban_end = datetime.datetime.now() + datetime.timedelta(days=365*100)
        timestamp = ban_end.timestamp()
        time_info = ""
        ban_end_str = "‚ôæÔ∏è"

    banning_user = await bot.get_chat_member(FORUM_CHAT_ID, user_id)
    if banning_user.status in ["administrator","creator"]:
        await message.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±–æ—Ç–∞")
        return

    async with aiosqlite.connect('data/bans.db') as db:
        await db.execute(
            '''INSERT OR REPLACE INTO ignored_users (user_id, ban_end) 
            VALUES (?, ?)''',
            (user_id, timestamp)
        )
        await db.commit()

    reply_text = (
        f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [ID:{user_id}] –±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–æ "
        f"{ban_end_str}\n"
        f"{time_info}"
    )
    await message.reply(reply_text)

    try:
        notification_text = (f"‚õî –í—ã –±—ã–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–∞–Ω–µ–Ω—ã –¥–æ {ban_end_str}" 
            if duration else "‚õî –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞ ‚ôæÔ∏è")
        await bot.send_message(user_id, text=notification_text)
    except Exception as e:
        await message.reply(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")

@router.message(Command("unban"))
async def unban_command(message: Message, bot: Bot):
    try:
        chat_member = await bot.get_chat_member(message.chat.id, message.from_user.id)
        if chat_member.status not in ['administrator', 'creator']:
            await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
            return
    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {str(e)}")
        return

    if not message.message_thread_id:
        await message.reply("‚ö† –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä—É–º–Ω–æ–π —Ç–µ–º–µ!")
        return

    topic_id = message.message_thread_id

    async with aiosqlite.connect('data/chat_links.db') as db:
        cursor = await db.execute(
            "SELECT user_id FROM chats WHERE topic_id = ?",
            (topic_id,)
        )
        result = await cursor.fetchone()

    if not result:
        await message.reply("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return

    user_id = result[0]

    async with aiosqlite.connect('data/bans.db') as db:
        cursor = await db.execute(
            "DELETE FROM ignored_users WHERE user_id = ?",
            (user_id,)
        )
        await db.commit()

    if cursor.rowcount > 0:
        await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å [ID:{user_id}] —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω\n")
        try:
            await bot.send_message(
                chat_id=user_id,
                text="üéâ –í–∞—à –±–∞–Ω –±—ã–ª —Å–Ω—è—Ç! –¢–µ–ø–µ—Ä—å –≤—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è"
            )
        except Exception as e:
            await message.reply(f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")
    else:
        await message.reply("‚Ñπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω")

@router.message(settings_filter)
async def change_setting(msg: Message, state: FSMContext):
    data = await state.get_data()
    
    if data.get("setting_type") == "confirmation_cooldown":
        new_cooldown = msg.text
        if parse_time(new_cooldown) <= 0:
            await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!")
            return
            
        config["cooldown"] = new_cooldown
        save_config(config)
        await msg.answer("‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω!")
        return
    
    category = data["category"]
    subcategory = data["subcategory"]
    
    if category == "emojis":
        config[category][subcategory]["emoji"] = msg.text[0]
    else:
        config[category][subcategory] = msg.text
    
    await msg.answer("–®–∞–±–ª–æ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.")
    save_config(config)
    await state.set_state(None)
@router.message(Command("set_chat"))
async def send_chat_id(msg: Message):
    global FORUM_CHAT_ID
    config = load_config()
    config["target_chat"] = str(msg.chat.id)
    save_config(config)
    FORUM_CHAT_ID = msg.chat.id
    await msg.answer(f"–¶–µ–ª–µ–≤–æ–π —á–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! ID: {msg.chat.id}")

@router.message(Command("set_topic"))
async def set_topic(msg: Message):
    global FORUM_CHAT_ID
    config["target_topic"] = msg.message_thread_id
    save_config(config)
    await msg.answer(f"–¢–µ–º–∞ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! ID: {msg.message_thread_id}")

@router.message(Command("settings"))
async def settings(msg: Message,state: FSMContext):
    user = await msg.bot.get_chat_member(FORUM_CHAT_ID,msg.from_user.id)
    if user.status == "creator":
        await msg.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:", reply_markup=settings_keyboard)

@router.message()
async def handle_forum_message(message: Message):
    if not FORUM_CHAT_ID or message.chat.id != FORUM_CHAT_ID:
        return
    
    if not message.message_thread_id or message.from_user.id == message.bot.id:
        return
    
    await forward_to_user(message.message_thread_id, message)